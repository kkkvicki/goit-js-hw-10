{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nlet userSelectedDate;\nconst datetimePicker = document.querySelector('#datetime-picker');\nconst startButton = document.querySelector('[data-start]');\nconst daysSpan = document.querySelector('[data-days]');\nconst hoursSpan = document.querySelector('[data-hours]');\nconst minutesSpan = document.querySelector('[data-minutes]');\nconst secondsSpan = document.querySelector('[data-seconds]');\nlet timerInterval;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    if (selectedDate <= new Date()) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n      });\n      startButton.disabled = true;\n    } else {\n      startButton.disabled = false;\n      userSelectedDate = selectedDate;\n    }\n  },\n};\nflatpickr(datetimePicker, options);\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  return { days, hours, minutes, seconds };\n}\n\nstartButton.addEventListener('click', () => {\n  if (!userSelectedDate) return;\n\n  startButton.disabled = true;\n  datetimePicker.disabled = true;\n\n  timerInterval = setInterval(() => {\n    const now = new Date();\n    const timeDifference = userSelectedDate - now;\n\n    if (timeDifference <= 0) {\n      clearInterval(timerInterval);\n      datetimePicker.disabled = false;\n      return;\n    }\n\n    const timeLeft = convertMs(timeDifference);\n    updateTimerDisplay(timeLeft);\n  }, 1000);\n});\n\nfunction updateTimerDisplay({ days, hours, minutes, seconds }) {\n  daysSpan.textContent = addLeadingZero(days);\n  hoursSpan.textContent = addLeadingZero(hours);\n  minutesSpan.textContent = addLeadingZero(minutes);\n  secondsSpan.textContent = addLeadingZero(seconds);\n}\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n"],"names":["userSelectedDate","datetimePicker","startButton","daysSpan","hoursSpan","minutesSpan","secondsSpan","timerInterval","options","selectedDates","selectedDate","iziToast","flatpickr","convertMs","ms","days","hours","minutes","seconds","timeDifference","timeLeft","updateTimerDisplay","addLeadingZero","value"],"mappings":"0IAKA,IAAIA,EACJ,MAAMC,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAC3D,IAAIC,EAEJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,CAAC,EAChCC,GAAgB,IAAI,MACtBC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACjB,CAAO,EACDT,EAAY,SAAW,KAEvBA,EAAY,SAAW,GACvBF,EAAmBU,EAEtB,CACH,EACAE,EAAUX,EAAgBO,CAAO,EAEjC,SAASK,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAClE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEAhB,EAAY,iBAAiB,QAAS,IAAM,CACrCF,IAELE,EAAY,SAAW,GACvBD,EAAe,SAAW,GAE1BM,EAAgB,YAAY,IAAM,CAEhC,MAAMY,EAAiBnB,EADX,IAAI,KAGhB,GAAImB,GAAkB,EAAG,CACvB,cAAcZ,CAAa,EAC3BN,EAAe,SAAW,GAC1B,MACD,CAED,MAAMmB,EAAWP,EAAUM,CAAc,EACzCE,EAAmBD,CAAQ,CAC5B,EAAE,GAAI,EACT,CAAC,EAED,SAASC,EAAmB,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAC7Df,EAAS,YAAcmB,EAAeP,CAAI,EAC1CX,EAAU,YAAckB,EAAeN,CAAK,EAC5CX,EAAY,YAAciB,EAAeL,CAAO,EAChDX,EAAY,YAAcgB,EAAeJ,CAAO,CAClD,CACA,SAASI,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC"}